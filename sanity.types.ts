/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type GetStartedCli = {
  _type: 'getStartedCli'
  title?: string
  subtitle?: string
}

export type HandpickedContributions = {
  _type: 'handpickedContributions'
  title?: string
  subtitle?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  contributions?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.guide'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.schema'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.showcaseProject'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.starter'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.tool'
      }
  >
}

export type TaxonomyCategory = {
  _id: string
  _type: 'taxonomy.category'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  indexable?: boolean
  headerTitle?: string
  headerBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  applicableTo?: Array<string>
  solutionBucket?: 'application' | 'workflow' | 'integration'
}

export type TaxonomyCombination = {
  _id: string
  _type: 'taxonomy.combination'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  indexable?: boolean
  headerTitle?: string
  headerBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  taxonomies?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.language'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.cssframework'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.usecase'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.category'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.contributionType'
      }
  >
}

export type TaxonomyContributionType = {
  _id: string
  _type: 'taxonomy.contributionType'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  headerTitle?: string
  headerBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  contributionType?:
    | 'contribution.guide'
    | 'contribution.tool'
    | 'contribution.showcaseProject'
    | 'contribution.starter'
    | 'contribution.schema'
    | 'contribution.event'
  customSections?: Array<
    | ({
        _key: string
      } & HandpickedContributions)
    | ({
        _key: string
      } & GetStartedCli)
  >
}

export type TaxonomySolution = {
  _id: string
  _type: 'taxonomy.solution'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  indexable?: boolean
  headerTitle?: string
  headerBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  applicableTo?: Array<string>
  solutionBucket?: 'application' | 'workflow' | 'integration'
}

export type TaxonomyCssframework = {
  _id: string
  _type: 'taxonomy.cssframework'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  indexable?: boolean
  headerTitle?: string
  headerBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  language?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'taxonomy.language'
  }
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  color?: Color
}

export type TaxonomyUsecase = {
  _id: string
  _type: 'taxonomy.usecase'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  indexable?: boolean
  headerTitle?: string
  headerBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type Callout = {
  _type: 'callout'
  calloutType?: 'protip' | 'gotcha' | 'example'
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
  >
}

export type SchemaEntryObj = {
  _type: 'schemaEntryObj'
  title?: string
  code?: Code
}

export type SimpleBlockContent = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<{
    href?: string
    _type: 'link'
    _key: string
  }>
  level?: number
  _type: 'block'
  _key: string
}>

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<{
    href?: string
    _type: 'link'
    _key: string
  }>
  level?: number
  _type: 'block'
  _key: string
}>

export type StudioImage = {
  _type: 'studioImage'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
  }
  hotspot?: SanityImageHotspot
  crop?: SanityImageCrop
  version?: string
  caption?: string
  alt?: string
}

export type SearchEntry = {
  _type: 'searchEntry'
  term?: string
  searches?: number
  matches?: number
}

export type Message = {
  _type: 'message'
  content?: string
  author?: SlackAuthor
  timestamp?: string
}

export type EmojiSummary = {
  _type: 'emojiSummary'
  shortCode?: string
  colonCode?: string
  count?: number
}

export type EmojiEntry = {
  _type: 'emojiEntry'
  shortCode?: string
  colonCode?: string
  authorName?: string
  authorSlackId?: string
  channelName?: string
  timestamp?: string
  permalink?: string
}

export type Authors = Array<{
  _ref: string
  _type: 'reference'
  _weak?: boolean
  _key: string
  [internalGroqTypeReferenceTo]?: 'person'
}>

export type GuideBody = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h2' | 'h3' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      _type: 'image'
      _key: string
    }
  | ({
      _key: string
    } & Youtube)
  | ({
      _key: string
    } & Code)
  | ({
      _key: string
    } & Callout)
>

export type SimpleStats = {
  _type: 'simpleStats'
  name?: string
  absolute?: number
  percentage?: number
}

export type LandingGetStarted = {
  _id: string
  _type: 'landing.getStarted'
  _createdAt: string
  _updatedAt: string
  _rev: string
  headerTitle?: string
  headerBody?: SimpleBlockContent
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  body?: Array<
    | ({
        _key: string
      } & HandpickedContributions)
    | ({
        _key: string
      } & GetStartedCli)
  >
}

export type Feedback = {
  _id: string
  _type: 'feedback'
  _createdAt: string
  _updatedAt: string
  _rev: string
  rating?: number
  contribution?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.guide'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.schema'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.showcaseProject'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.starter'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.tool'
      }
  comment?: string
  done?: boolean
  notes?: string
}

export type TaxonomyContest = {
  _id: string
  _type: 'taxonomy.contest'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
}

export type TechPartner = {
  _id: string
  _type: 'techPartner'
  _createdAt: string
  _updatedAt: string
  _rev: string
  companyName?: string
  oneLiner?: string
  slug?: Slug
  hidden?: boolean
  shortDesc?: string
  partnerSite?: string
  longDesc?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  partnerLogos?: Figure
  color?: Color
  taxonomy?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
      }
  editors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
  officialContributions?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.showcaseProject'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.starter'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.tool'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.schema'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.guide'
      }
  >
}

export type TaxonomyFramework = {
  _id: string
  _type: 'taxonomy.framework'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  indexable?: boolean
  headerTitle?: string
  headerBody?: SimpleBlockContent
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: SimpleBlockContent
  language?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'taxonomy.language'
  }
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  color?: Color
}

export type TaxonomyLanguage = {
  _id: string
  _type: 'taxonomy.language'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  indexable?: boolean
  headerTitle?: string
  headerBody?: SimpleBlockContent
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: SimpleBlockContent
}

export type TaxonomyIntegration = {
  _id: string
  _type: 'taxonomy.integration'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  indexable?: boolean
  headerTitle?: string
  headerBody?: SimpleBlockContent
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  finalBody?: SimpleBlockContent
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  color?: Color
}

export type Figure = {
  _type: 'figure'
  logoTransparent?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  }
  logoDark?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    caption?: string
    _type: 'image'
  }
}

export type CuratedContribution = {
  _id: string
  _type: 'curatedContribution'
  _createdAt: string
  _updatedAt: string
  _rev: string
  contribution?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.guide'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.schema'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.showcaseProject'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.starter'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.tool'
      }
  official?: boolean
  approved?: boolean
  spamRating?: number
  approvalReasons?: Array<string>
  featured?: boolean
  twitterApproved?: boolean
  twitterSent?: boolean
  guestAuthorProgram?: boolean
  cameFromAdmin?: boolean
  solutions?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
  }>
  related?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.guide'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.schema'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.showcaseProject'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.starter'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'contribution.tool'
      }
  >
  relatedTitle?: string
}

export type ContributionTool = {
  _id: string
  _type: 'contribution.tool'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: string
  slug?: Slug
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  publishedAt?: string
  authors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  color?:
    | '#ffffff'
    | '#f1f3f6'
    | '#e4e8ed'
    | '#cad1dc'
    | '#afbaca'
    | '#95a3b9'
    | '#7b8ca8'
    | '#66758d'
    | '#515e72'
    | '#3c4758'
    | '#262f3d'
    | '#1c2430'
    | '#e8f0fe'
    | '#d1e2fd'
    | '#a3c5fb'
    | '#75a8f9'
    | '#468bf7'
    | '#196ef6'
    | '#175dcb'
    | '#164ca1'
    | '#143b77'
    | '#132a4d'
    | '#122138'
    | '#e2f4fd'
    | '#c5eafc'
    | '#8cd5fa'
    | '#52c0f8'
    | '#19abf6'
    | '#1792d2'
    | '#167aaf'
    | '#15628c'
    | '#144969'
    | '#133146'
    | '#122534'
    | '#e5faec'
    | '#ccf5da'
    | '#99ebb6'
    | '#66e192'
    | '#34d76e'
    | '#2eb761'
    | '#289755'
    | '#237848'
    | '#1d583c'
    | '#17382f'
    | '#142829'
    | '#fcf5d9'
    | '#faecb4'
    | '#f6da69'
    | '#f2c81e'
    | '#d2af1e'
    | '#b2961f'
    | '#927c20'
    | '#726420'
    | '#524b21'
    | '#323222'
    | '#212522'
    | '#fdefe6'
    | '#fce0cd'
    | '#f9c19b'
    | '#f6a369'
    | '#f38437'
    | '#dd6c1e'
    | '#b45b1f'
    | '#8c4b20'
    | '#633a21'
    | '#3a2922'
    | '#262122'
    | '#fbeaea'
    | '#f8d5d6'
    | '#f1acad'
    | '#ea8284'
    | '#e3595b'
    | '#dc3033'
    | '#b32b2f'
    | '#8b262c'
    | '#622229'
    | '#3a1d26'
    | '#261b24'
    | '#fbeaf4'
    | '#f8d5ea'
    | '#f1acd5'
    | '#ea82c1'
    | '#e359ac'
    | '#dc3098'
    | '#b32b80'
    | '#8b2669'
    | '#622251'
    | '#3a1d3a'
    | '#261b2e'
    | '#f7e8fe'
    | '#f0d1fd'
    | '#e2a3fb'
    | '#d476f9'
    | '#c648f7'
    | '#b81bf6'
    | '#961acb'
    | '#751aa1'
    | '#541977'
    | '#33194d'
    | '#221938'
  repositoryUrl?: string
  readmeUrl?: string
  studioVersion?: -1 | 2 | 3
  packageUrl?: string
  installWith?: string
  packageName?: string
  v3DistTag?: string
  v3InstallWith?: string
  studioV2Support?: '' | 'discontinued' | 'continued'
  v2ReadmeUrl?: string
  v2DistTag?: string
  v2PackageName?: string
  readme?: string
  solutions?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
  }>
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.category'
  }>
  frameworks?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
  }>
  integrations?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
  }>
  contests?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.contest'
  }>
}

export type ContributionStarter = {
  _id: string
  _type: 'contribution.starter'
  _createdAt: string
  _updatedAt: string
  _rev: string
  warningv2?: string
  title?: string
  description?: string
  studioVersion?: -1 | 2 | 3
  slug?: Slug
  deploymentType?: 'vercel' | 'netlify' | 'none'
  netlifyDeployLink?: string
  vercelDeployLink?: string
  repository?: string
  repoId?: string
  demoURL?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  authors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  publishedAt?: string
  solutions?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
  }>
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.category'
  }>
  frameworks?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
  }>
  cssframeworks?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.cssframework'
  }>
  usecases?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.usecase'
  }>
  integrations?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
  }>
  tools?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'contribution.tool'
  }>
}

export type ContributionShowcaseProject = {
  _id: string
  _type: 'contribution.showcaseProject'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: string
  url?: string
  slug?: Slug
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  publishedAt?: string
  authors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  featuredVideo?: Youtube
  projectScreenshots?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    alt?: string
    _type: 'image'
    _key: string
  }>
  studioScreenshots?: Array<
    {
      _key: string
    } & StudioImage
  >
  body?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  solutions?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
  }>
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.category'
  }>
  frameworks?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
  }>
  integrations?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
  }>
  tools?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'contribution.tool'
  }>
}

export type Youtube = {
  _type: 'youtube'
  url?: string
  title?: string
  publishDate?: string
  description?: string
}

export type ContributionSchema = {
  _id: string
  _type: 'contribution.schema'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  publishedAt?: string
  hidden?: boolean
  description?: string
  authors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
  studioVersion?: -1 | 3 | 2
  schemaFiles?: Array<
    {
      _key: string
    } & SchemaEntryObj
  >
  body?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  solutions?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
  }>
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.category'
  }>
  contests?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.contest'
  }>
}

export type ContributionGuide = {
  _id: string
  _type: 'contribution.guide'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: string
  seoTitle?: string
  updatedAt?: string
  studioVersion?: -1 | 3 | 2
  hidden?: boolean
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  publishedAt?: string
  authors?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
  slug?: Slug
  introduction?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  canonicalUrl?: string
  body?: GuideBody
  externalLink?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    alt?: string
    _type: 'image'
  }
  solutions?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
  }>
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.category'
  }>
  frameworks?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
  }>
  integrations?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
  }>
  tools?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'contribution.tool'
  }>
}

export type GlobalSettings = {
  _id: string
  _type: 'globalSettings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  answersConversionScript?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h2' | 'h3' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  guidesConversionScript?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h2' | 'h3' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  menuIntegrations?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
      }
  >
}

export type CommunityBulletin = {
  _id: string
  _type: 'communityBulletin'
  _createdAt: string
  _updatedAt: string
  _rev: string
  headerTitle?: string
  headerBody?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  seoTitle?: string
  seoDescription?: string
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  frameworks?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
  }>
  contributorsForSpotlight?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
  frameworksTitle?: string
  featuredProjectTitle?: string
  featuredProjectCta?: string
  latestToolsTitle?: string
  latestToolsCta?: string
  latestStartersTitle?: string
  latestStartersCta?: string
  latestGuidesTitle?: string
  latestGuidesCta?: string
  activeContributorsTitle?: string
  activeContributorsCta?: string
  joinCommunityCta?: {
    title?: string
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    becomeContributorCta?: string
    joinSlackCta?: string
    body?: SimpleBlockContent
  }
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h2' | 'h3' | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        alt?: string
        _type: 'image'
        _key: string
      }
  >
}

export type StudioTutorials = {
  _id: string
  _type: 'studioTutorials'
  _createdAt: string
  _updatedAt: string
  _rev: string
  chosenGuides?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'contribution.guide'
  }>
}

export type Tag = {
  _id: string
  _type: 'tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  value?: Slug
  public?: boolean
  alternatives?: Array<string>
}

export type Person = {
  _id: string
  _type: 'person'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  hidden?: boolean
  handle?: Slug
  photo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  headline?: string
  bio?: SimpleBlockContent
  expertise?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
  }>
  tech?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
      }
  >
  imageUrl?: string
  location?: string
  geolocation?: Geopoint
  usesSanitySince?: string
  url?: string
  email?: string
  work?: {
    title?: string
    company?: string
    url?: string
    availableForWork?: boolean
  }
  social?: {
    github?: string
    twitter?: string
    linkedin?: string
    devto?: string
  }
  slackId?: string
  allowSlackRelation?: boolean
  spotlightQuestion?: SimpleBlockContent
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
  savedTickets?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'ticket'
  }>
  organizations?: Array<{
    id?: string
    link?: string
    _type: 'organization'
    _key: string
  }>
  projects?: Array<{
    projectId?: string
    link?: string
    stack?: Array<
      | {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
        }
      | {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'taxonomy.language'
        }
      | {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'techPartner'
        }
      | {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'taxonomy.cssframework'
        }
    >
    _type: 'project'
    _key: string
  }>
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type CommunityAmbassadors = {
  _id: string
  _type: 'communityAmbassadors'
  _createdAt: string
  _updatedAt: string
  _rev: string
  persons?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
}

export type Aggregate = {
  _id: string
  _type: 'aggregate'
  _createdAt: string
  _updatedAt: string
  _rev: string
  subset?: 'day' | '7-days' | '30-days' | 'week' | 'month' | 'quarter' | 'year' | 'all'
  dateFrom?: string
  dateTo?: string
  volume?: number
  activity?: number
  agents?: Array<
    {
      _key: string
    } & SimpleStats
  >
  categories?: Array<
    {
      _key: string
    } & SimpleStats
  >
  channels?: Array<
    {
      _key: string
    } & SimpleStats
  >
  coverage?: Array<
    {
      _key: string
    } & SimpleStats
  >
  resolution?: Array<
    {
      _key: string
    } & SimpleStats
  >
  tags?: Array<
    {
      _key: string
    } & SimpleStats
  >
  participants?: number
  threadLength?: number
  firstResponse?: number
  responseTime?: number
  sources?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'aggregate'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'ticket'
      }
  >
}

export type AnswerFeedback = {
  _id: string
  _type: 'answerFeedback'
  _createdAt: string
  _updatedAt: string
  _rev: string
  rating?: number
  answer?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'editorial'
  }
  comment?: string
  done?: boolean
  notes?: string
}

export type Editorial = {
  _id: string
  _type: 'editorial'
  _createdAt: string
  _updatedAt: string
  _rev: string
  ticket?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'ticket'
  }
  permalink?: string
  relevancy?: 0 | 25 | 50 | 100
  editorialTitle?: string
  featured?: boolean
  solutions?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.solution'
  }>
  frameworks?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.framework'
  }>
  integrations?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'taxonomy.integration'
  }>
  tools?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'contribution.tool'
  }>
  slug?: Slug
  summary?: string
  action?: 'none' | 'bug' | 'feature' | 'docs'
  solvedWith?: {
    url?: string
    summary?: string
  }
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Ticket = {
  _id: string
  _type: 'ticket'
  _createdAt: string
  _updatedAt: string
  _rev: string
  saveTicket?: string
  status?: 'open' | 'resolved' | 'cancelled'
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
  addTags?: string
  channelName?: string
  author?: SlackAuthor
  openedBy?: string
  thread?: Array<
    {
      _key: string
    } & Message
  >
  threadCreated?: string
  threadUpdated?: string
  threadFirstClosed?: string
  threadClosed?: string
  relatedTickets?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'ticket'
  }>
}

export type SlackAuthor = {
  _type: 'slackAuthor'
  slackName?: string
  slackId?: string
  isSanity?: boolean
}

export type Code = {
  _type: 'code'
  language?: string
  filename?: string
  code?: string
  highlightedLines?: Array<number>
}

export type Markdown = string

export type Color = {
  _type: 'color'
  hex?: string
  alpha?: number
  hsl?: HslaColor
  hsv?: HsvaColor
  rgb?: RgbaColor
}

export type RgbaColor = {
  _type: 'rgbaColor'
  r?: number
  g?: number
  b?: number
  a?: number
}

export type HsvaColor = {
  _type: 'hsvaColor'
  h?: number
  s?: number
  v?: number
  a?: number
}

export type HslaColor = {
  _type: 'hslaColor'
  h?: number
  s?: number
  l?: number
  a?: number
}
export declare const internalGroqTypeReferenceTo: unique symbol
